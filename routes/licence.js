const express = require('express')
const router = express.Router()
const licenceController = require('../controllers/licenceController')
const auth = require('../helper/auth.controller')
const logsApi = require('../helper/logsApi.controller')

router.get('/all/:siteId', logsApi.startlogsApi, auth.authenticateJWT, licenceController.getSiteLicences, logsApi.endlogsApi)
router.get('/zones/:siteId', logsApi.startlogsApi, auth.authenticateJWT, licenceController.getZones, logsApi.endlogsApi)
router.get('/getLicenceType', logsApi.startlogsApi, auth.authenticateJWT, licenceController.getLicenceType, logsApi.endlogsApi)
router.get('/getLicenceProductType', logsApi.startlogsApi, auth.authenticateJWT, licenceController.getLicenceProductType, logsApi.endlogsApi)
router.post('/create', logsApi.startlogsApi, auth.authenticateJWT, licenceController.create, logsApi.endlogsApi)
router.post('/getDsNotifications', licenceController.getDsNotifications)
router.put('/:licenceId', logsApi.startlogsApi, auth.authenticateJWT, licenceController.update, logsApi.logsApi, logsApi.logsChange)
router.get('/:licenceId', logsApi.startlogsApi, auth.authenticateJWT, licenceController.getLicence, logsApi.endlogsApi)
router.get('/history/:licenceId', logsApi.startlogsApi, auth.authenticateJWT, licenceController.getHistory, logsApi.endlogsApi)
router.get('/getByClient/:clientId', logsApi.startlogsApi, auth.authenticateJWT, licenceController.getLicencesbyClient, logsApi.endlogsApi)
router.post('/exportPdf', logsApi.startlogsApi, auth.authenticateJWT, licenceController.exportPdf, logsApi.endlogsApi)
router.post('/licenceProduct/create', logsApi.startlogsApi, auth.authenticateJWT, licenceController.createLicenceProduct, logsApi.endlogsApi)
router.put('/licenceProduct/:licenceProductId', logsApi.startlogsApi, auth.authenticateJWT, licenceController.updateLicenceProduct, logsApi.logsApi, logsApi.logsChange)
router.get('/licenceProducts/:licenceProductId/detail', logsApi.startlogsApi, auth.authenticateJWT, licenceController.getLicenceProductDetail, logsApi.endlogsApi)
router.delete('/deleteLicenceProduct/:licenceProductId', logsApi.startlogsApi, auth.authenticateJWT, licenceController.deleteLicenceProduct, logsApi.logsApi, logsApi.logsChange)
router.post('/licenceDocument/create', logsApi.startlogsApi, auth.authenticateJWT, licenceController.createLicenceDocument, logsApi.endlogsApi)
router.get('/licenceDocuments/:licenceDocumentId/detail', logsApi.startlogsApi, auth.authenticateJWT, licenceController.getLicenceDocumentDetail, logsApi.endlogsApi)
router.get('/:siteId/zones/:clientId', logsApi.startlogsApi, auth.authenticateJWT, licenceController.getLicenceZonesByClient, logsApi.endlogsApi)
router.post('/terminate', logsApi.startlogsApi, auth.authenticateJWT, licenceController.terminate, logsApi.logsApi, logsApi.logsChange)

module.exports = router
